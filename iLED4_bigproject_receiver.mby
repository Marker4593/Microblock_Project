{"config.json":"{\"mode\":\"code\",\"github\":null,\"board\":\"openbit\",\"level\":\"Beginner\"}","main.py":"# receiver\r\nfrom machine import Pin\r\nfrom time import sleep\r\nimport ESPNOW as now\r\nimport iLED4\r\nimport _thread\r\n\r\nprint(now.getMyMAC())\r\n# 10:97:BD:21:2D:F0\r\nstart = False\r\nshow_point = True\r\nrecei_point = True\r\nnum1, num2, num3, num4 = 0, 0, 0, 0\r\npoint = []\r\n\r\ndef show_point_on_iLED4():\r\n    global show_point, point, num1, num2, num3, num4\r\n    while show_point:\r\n        iLED4.drawColon(True)\r\n        iLED4.writeDigitNum(0, num1, False)\r\n        iLED4.writeDigitNum(1, num2, False)\r\n        iLED4.writeDigitNum(2, num3, False)\r\n        iLED4.writeDigitNum(3, num4, False)\r\n        sleep(0.1)\r\n\r\n_thread.start_new_thread(show_point_on_iLED4, ())\r\n\r\ndef receiver_point():\r\n    global recei_point, point, num1, num2, num3, num4\r\n    while recei_point:\r\n        if now.isReadyToRead():\r\n            tempo = now.readAsNumber()\r\n            tempo = int(tempo)\r\n            point.append(tempo)\r\n            print(point)\r\n            process_point()\r\n        sleep(0.1)\r\n\r\n_thread.start_new_thread(receiver_point, ())\r\n\r\ndef update_num(first_num, second_num, plus=True, special=None):\r\n    if plus:\r\n        print(\"plus_process\")\r\n        second_num += 1\r\n        if second_num > 9:\r\n            second_num = 0\r\n            first_num += 1\r\n            if first_num > 9:\r\n                first_num = 0\r\n    elif special == \"MAX\":\r\n        second_num = 9\r\n        first_num = 9\r\n        print(\"Max process\")\r\n    elif special == \"MIN\":\r\n        second_num = 0\r\n        first_num = 0\r\n        print(\"Min process\")\r\n    else:\r\n        second_num -= 1\r\n        if second_num < 0:\r\n            second_num = 9\r\n            first_num -= 1\r\n            if first_num < 0:\r\n                first_num = 9\r\n    return first_num, second_num\r\n\r\ndef return_point(team, points):\r\n    if points[0] != \"0\":\r\n        ready_send = team+points\r\n        now.send(ready_send, \"8C:CE:4E:BB:4A:FC\")\r\n    else:\r\n        ready_send = team+points[1:]\r\n        now.send(ready_send, \"8C:CE:4E:BB:4A:FC\")\r\n\r\ndef return_status(aleart):\r\n    now.send(aleart, \"8C:CE:4E:BB:4A:FC\")\r\n\r\n\r\ndef process_point():\r\n    global point, num1, num2, num3, num4\r\n    if point[0] == 444:\r\n        num1 = 0\r\n        num2 = 0\r\n        num3 = 0\r\n        num4 = 0\r\n        point = []\r\n        return_status(\"Clear\")\r\n        sleep(1)\r\n    elif point[0] == 1:\r\n        num1, num2 = update_num(num1, num2, plus=True)\r\n        return_point(\"A\", str(num1) + str(num2))\r\n        point.pop(0)\r\n    elif point[0] == 11:\r\n        num1, num2 = update_num(num1, num2, plus=False)\r\n        return_point(\"A\", str(num1) + str(num2))\r\n        point.pop(0)\r\n    elif point[0] == 991:\r\n        num1, num2 = update_num(num1, num2, plus=False, special=\"MAX\")\r\n        return_point(\"A\", str(num1) + str(num2))\r\n        point.pop(0)\r\n    elif point[0] == 111:\r\n        num1, num2 = update_num(num1, num2, plus=False, special=\"MIN\")\r\n        return_point(\"A\", str(num1) + str(num2))\r\n        point.pop(0)\r\n    elif point[0] == 2:\r\n        num3, num4 = update_num(num3, num4, plus=True)\r\n        return_point(\"B\", str(num3) + str(num4))\r\n        point.pop(0)\r\n    elif point[0] == 22:\r\n        num3, num4 = update_num(num3, num4, plus=False)\r\n        return_point(\"B\", str(num3) + str(num4))\r\n        point.pop(0)\r\n    elif point[0] == 992:\r\n        num3, num4 = update_num(num3, num4, plus=False, special=\"MAX\")\r\n        return_point(\"B\", str(num3) + str(num4))\r\n        point.pop(0)\r\n    elif point[0] == 222:\r\n        num3, num4 = update_num(num3, num4, plus=False, special=\"MIN\")\r\n        return_point(\"B\", str(num3) + str(num4))\r\n        point.pop(0)\r\n    \r\n    \r\n    print(\"process\")\r\n\r\n\r\n\r\ndef start_process():\r\n    for _ in range(4):\r\n        display.show(\"R\")\r\n        sleep(0.3)\r\n        display.show(\"O\")\r\n        sleep(0.3)\r\n    for process in range(0, 101, 1):\r\n        iLED4.printFloat(process, 0, 10)\r\n        sleep(0.015)\r\n    sleep(0.5)\r\n    iLED4.clear()\r\n    sleep(0.5)\r\n\r\n\r\n\r\ndef main_process():\r\n    global start, point\r\n    # if start == False:\r\n    #     start_process()\r\n    #     start = True\r\n    display.show(\"R\")\r\n\r\nwhile True:\r\n    main_process()"}