{"config.json":"{\"mode\":\"code\",\"github\":null,\"board\":\"openbit\",\"level\":\"Beginner\"}","main.py":"# sender\r\nfrom machine import Pin, PWM\r\nfrom time import sleep\r\nimport ESPNOW as now\r\nimport OLED\r\nimport time\r\nimport _thread\r\n\r\nswone = Pin(15, Pin.IN)\r\nswtwo = Pin(2, Pin.IN)\r\nswa = Pin(5, Pin.IN)\r\nswb = Pin(12, Pin.IN)\r\nBuz = PWM(Pin(26), freq=2000)\r\n\r\noled = OLED.SSD1306_I2C(128, 64)\r\n#----------------------\r\nsw1 = swone()\r\nsw2 = swtwo()\r\nswA = swa()\r\nswB = swb()\r\nsw1_st = sw1\r\nsw2_st = sw2\r\nswA_st = swA\r\nswB_st = swB\r\n#---------------------\r\n\r\nprint(now.getMyMAC())\r\n# 8C:CE:4E:BB:4A:FC\r\nstart = False\r\nstatus = \"\"\r\nsw_timer = 0\r\nnow_time = 0\r\nbefore_time = 0\r\nA_Point = \"0\"\r\nB_Point = \"0\"\r\nse_point = True\r\nbuz_count = 0\r\nbuz_tone = 1000\r\npoint = []\r\n\r\n\r\n\r\ndef handle_switch(sw, sw_status, timer_data, send_short_hand, sh_data1, sh_data2):\r\n    global buz_count, buz_tone\r\n    if sw == 0:\r\n        timer_data[\"sw_timer\"] += 0.1\r\n        # print(timer_data[\"sw_timer\"])\r\n        if sw_status == 1:\r\n            buz_count = 0\r\n            Buz.duty(buz_tone)\r\n            send_short_hand(sh_data1)\r\n            print(\"one click\")\r\n            sleep(0.1)\r\n            if timer_data[\"before_time\"] == 0:\r\n                timer_data[\"before_time\"] = now_time\r\n            if timer_data[\"sw_timer\"] >= 0.3:\r\n                Buz.duty(0)\r\n                send_short_hand(sh_data2)\r\n                print(\"special send complete\")\r\n                timer_data[\"sw_timer\"] = 0\r\n                sleep(2)\r\n        elif sw_status == 0:\r\n            Buz.duty(0)\r\n            if Buz.duty() == 0:\r\n                print(\"on click\")\r\n                buz_count += 1\r\n                print(f\"Count = {buz_count}\")\r\n                if buz_count == 6:\r\n                    Buz.duty(buz_tone)\r\n                    buz_count = 0\r\n                send_short_hand(sh_data1)\r\n                sleep(0.1)\r\n    Buz.duty(0)\r\n    return timer_data\r\n\r\ndef send_short_hand(point):\r\n    now.send(point, \"10:97:BD:21:2D:F0\")\r\n    print(\"send complete\")\r\n\r\ndef start_process():\r\n    for _ in range(4):\r\n        display.show(\"T\")\r\n        sleep(0.2)\r\n        display.clear()\r\n        sleep(0.2)\r\n    display.scroll(\"T\")\r\n    sleep(0.2)\r\n\r\ndef send_point():\r\n    global se_point, sw_timer, before_time, now_time,\\\r\n            sw1_st, sw2_st, swA_st, swB_st, status\r\n    sw1_data = {\"sw_timer\":0, \"before_time\":0}\r\n    sw2_data = {\"sw_timer\":0, \"before_time\":0}\r\n    swA_data = {\"sw_timer\":0, \"before_time\":0}\r\n    swB_data = {\"sw_timer\":0, \"before_time\":0}\r\n    while se_point:\r\n        #----------------------\r\n        sw1 = swone()\r\n        sw2 = swtwo()\r\n        swA = swa()\r\n        swB = swb()\r\n        #---------------------\r\n        if sw1 == 0 and sw2 == 1:\r\n            sw1_data = handle_switch(sw1, sw1_st, sw1_data, send_short_hand, 1, 991)\r\n        sw1_st = sw1\r\n        if sw2 == 0 and sw1 == 1:\r\n            sw2_data = handle_switch(sw2, sw2_st, sw2_data, send_short_hand, 11, 111)\r\n        sw2_st = sw2\r\n        if swA == 0:\r\n            swA_data = handle_switch(swA, swA_st, swA_data, send_short_hand, 2, 992)\r\n        swA_st = swA\r\n        if swB == 0:\r\n            swB_data = handle_switch(swB, swB_st, swB_data, send_short_hand, 22, 222)\r\n        swB_st = swB\r\n        if sw1 == 0 and sw2 == 0:\r\n            send_short_hand(444)\r\n\r\n        if now_time > sw1_data[\"before_time\"]:\r\n            sw1_data[\"before_time\"] = 0\r\n            sw1_data[\"sw_timer\"] = 0\r\n        if now_time > sw1_data[\"before_time\"] + 1:\r\n            status = \"\"\r\n\r\n        if now_time > sw2_data[\"before_time\"]:\r\n            sw2_data[\"before_time\"] = 0\r\n            sw2_data[\"sw_timer\"] = 0\r\n        if now_time > sw2_data[\"before_time\"] + 1:\r\n            status = \"\"\r\n\r\n        if now_time > swA_data[\"before_time\"]:\r\n            swA_data[\"before_time\"] = 0\r\n            swA_data[\"sw_timer\"] = 0\r\n        if now_time > swA_data[\"before_time\"] + 1:\r\n            status = \"\"\r\n\r\n        if now_time > swB_data[\"before_time\"]:\r\n            swB_data[\"before_time\"] = 0\r\n            swB_data[\"sw_timer\"] = 0\r\n        if now_time > swB_data[\"before_time\"] + 1:\r\n            status = \"\"\r\n    \r\n\r\n        \r\n        \r\n\r\n_thread.start_new_thread(send_point, ())\r\n\r\ndef oled_show(point1, point2, Status):\r\n    oled.fill(0)\r\n    oled.text(\"A VS B\", 0, 0, 1)\r\n    oled.text(f\"A : {point1}\", 0, 20, 1)\r\n    oled.text(f\"B : {point2}\", 0, 30, 1)\r\n    oled.text(\"A\", 0, 45, 1)\r\n    oled.text(\"B\", 0, 55, 1)\r\n    oled.fill_rect(10 , 48, 10 + int(point1), 5, 1)\r\n    oled.fill_rect(10 , 56, 10 + int(point2), 5, 1)\r\n    oled.text(f\"{Status}\", 60, 25, 1)\r\n    oled.show()\r\n\r\ndef check_point_change(before_point, now_point):\r\n    if before_point == \"0\" and now_point == \"99\":\r\n        buzzer.tone(2000, 1)\r\n        print(\"function Processing\")\r\n\r\ndef main_process():\r\n    global start, now_time, A_Point, B_Point, status, point\r\n    # if start == False:\r\n    #     start_process()\r\n    #     start = True\r\n    display.show(\"T\")\r\n    now_time = time.time()\r\n\r\n    before_A_Point = A_Point\r\n    before_B_Point = B_Point\r\n    \r\n    if now.isReadyToRead():\r\n        tempo = now.readAsText()\r\n        tempo = str(tempo)\r\n        point.append(tempo)\r\n        print(point)\r\n        \r\n        if \"Clear\" in point:\r\n            A_Point = \"0\"\r\n            B_Point = \"0\"\r\n            point = []\r\n            sleep(1)\r\n        elif point[0][0] == \"A\":\r\n            A_Point = point[0][1:]\r\n            if A_Point == \"0\" and before_A_Point == \"99\":\r\n                status = \"A UP\"\r\n            elif before_A_Point == \"0\" and A_Point == \"99\":\r\n                status = \"A DOWN\"\r\n            elif A_Point > before_A_Point:\r\n                status = \"A UP\"\r\n            elif A_Point < before_A_Point and before_A_Point != \"99\":\r\n                status = \"A DOWN\"\r\n            point.pop(0)\r\n        elif point[0][0] == \"B\":\r\n            B_Point = point[0][1:]\r\n            if B_Point == \"0\" and before_B_Point == \"99\":\r\n                status = \"B UP\"\r\n            elif before_B_Point == \"0\" and B_Point == \"99\":\r\n                status = \"B DOWN\"\r\n            elif B_Point > before_B_Point:\r\n                status = \"B UP\"\r\n            elif B_Point < before_B_Point and before_B_Point != \"99\":\r\n                status = \"B DOWN\"\r\n            point.pop(0)\r\n        else:\r\n            status = point\r\n        \r\n\r\n    oled_show(A_Point, B_Point, status)\r\n\r\n    check_point_change(before_A_Point, A_Point)\r\n    check_point_change(before_B_Point, B_Point)\r\n    \r\n    # before_A_Point = A_Point\r\n    # before_B_Point = B_Point\r\n\r\nwhile True:\r\n    main_process()\r\n"}