{"main.py":"import display\r\nimport ESPNOW as now\r\nimport OLED\r\nimport ntptime\r\nimport network\r\nimport time\r\nimport _thread\r\nfrom machine import Pin\r\nfrom time import sleep\r\nfrom neopixel import NeoPixel\r\n\r\nnp = NeoPixel(Pin(13, Pin.OUT), 25)\r\noled = OLED.SSD1306_I2C(128, 64)\r\n\r\nswone = Pin(2, Pin.IN)\r\nswtwo = Pin(15, Pin.IN)\r\nswa = Pin(5, Pin.IN)\r\nswb = Pin(12, Pin.IN)\r\n\r\n#----------------------\r\nsw1 = swone()\r\nsw2 = swtwo()\r\nswA = swa()\r\nswB = swb()\r\nsw1_st = sw1\r\nsw2_st = sw2\r\nswA_st = swA\r\nswB_st = swB\r\n#---------------------\r\n\r\nprint(now.getMyMAC())\r\n# 8C:CE:4E:BB:4A:FC\r\n\r\nse_po = True\r\n\r\nsw_timer = 0\r\nA_Point = \"0\"\r\nB_Point = \"0\"\r\nstatus = \"\"\r\ntime = \"\"\r\ntext = \"\"\r\n\r\ndef led_on(color, *index):\r\n    for i in index:\r\n        np[i] = color\r\n    np.write()\r\n    sleep(0.15)\r\n\r\ndef led_off(*index):\r\n    for i in index:\r\n        np[i] = (0,0,0)\r\n    np.write()\r\n\r\n\r\ndef T_left_scroll(color):\r\n    steps = [\r\n        ([0], [16]),\r\n        ([1], [16]),\r\n        ([2], [16]),\r\n        ([5, 10, 15, 20], [16]),\r\n        ([3], [5, 10, 15, 20]),\r\n        ([6, 11, 16, 21], [24]),\r\n        ([4], [6, 11, 16, 21]),\r\n        ([2, 7, 12, 17, 22], [13]),\r\n        ([1], [0, 7, 12, 17, 22]),\r\n        ([8, 13, 18, 23], [24]),\r\n        ([2], [1, 8, 13, 18, 23]),\r\n        ([9, 14, 19, 24], [5]),\r\n        ([3], [2, 9, 14, 19, 24]),\r\n        ([4], [3]),\r\n        ([4], [4]) # Python จะ unpack tuple ให้โดยอัติโนมัติตอนลูป ไม่ต่องสงสัย\r\n    ]\r\n\r\n    for on, off in steps:\r\n        led_on(color, *on) # * คือการ unpack หรือเอา list ออกก่อนค่อยเอาเข้าฟังก์ชั่น\r\n        led_off(*off)\r\n    sleep(0.5)\r\n# T_left_scroll((30, 0, 30))\r\n\r\ndef sh_switch(sw, sw_status, timer_data, send_short_hand, sh_data1, sh_data2):\r\n    if sw == 0:\r\n        if sw_status == 1 and timer_data['sw_timer'] < 15:\r\n            send_short_hand(sh_data1)\r\n            print(\"one click\")\r\n            buzzer.tone(2000, 1)\r\n        elif sw_status == 0:\r\n            timer_data['sw_timer'] += 1\r\n            print(timer_data['sw_timer'])\r\n            if timer_data['sw_timer'] < 15:\r\n                send_short_hand(sh_data1)\r\n                print(\"many_1 click\")\r\n                buzzer.tone(2000, 1)\r\n            else:\r\n                send_short_hand(sh_data2)\r\n                print(\"many_2 click\")\r\n                buzzer.tone(2000, 0.5)\r\n\r\n\r\ndef send_short_hand(point):\r\n    now.send(point, \"10:97:BD:21:2D:F0\")\r\n\r\ndef send_point():\r\n    global sw1_st, sw2_st, swA_st, swB_st, status, se_po\r\n    sw1_data = {\"sw_timer\":0}\r\n    sw2_data = {\"sw_timer\":0}\r\n    swA_data = {\"sw_timer\":0}\r\n    swB_data = {\"sw_timer\":0}\r\n    while se_po:\r\n        #----------------------\r\n        sw1 = swone()\r\n        sw2 = swtwo()\r\n        swA = swa()\r\n        swB = swb()\r\n        #---------------------\r\n        if sw1 == 0:\r\n            sh_switch(sw1, sw1_st, sw1_data, send_short_hand, \"A_UP\", \"A_UPPER\")\r\n        elif sw2 == 0:\r\n            sh_switch(sw2, sw2_st, sw2_data, send_short_hand, \"A_DOWN\", \"A_DOWNER\")\r\n        elif swA == 0:\r\n            sh_switch(swA, swA_st, swA_data, send_short_hand, \"B_UP\", \"B_UPPER\")\r\n        elif swB == 0:\r\n            sh_switch(swB, swB_st, swB_data, send_short_hand, \"B_DOWN\", \"B_DOWNER\")\r\n        else:\r\n            sw1_data['sw_timer'] = 0\r\n            sw2_data['sw_timer'] = 0\r\n            swA_data['sw_timer'] = 0\r\n            swB_data['sw_timer'] = 0\r\n        sw1_st = sw1\r\n        sw2_st = sw2\r\n        swA_st = swA\r\n        swB_st = swB\r\n    sleep(0.01)\r\n        \r\n_thread.start_new_thread(send_point, ())\r\n\r\ndef show_point(point1, point2, status, timing):\r\n    oled.fill(0)\r\n    oled.text(\"A VS B\", 0, 0, 1)\r\n    oled.text(f\"A :{point1}\", 0, 15, 1)\r\n    oled.text(f\"B :{point2}\", 0, 25, 1)\r\n    oled.text(f\"St :{status}\", 0, 40, 1)\r\n    oled.text(f\"{timing}\", 20, 50, 1)\r\n    oled.show()\r\n\r\n\r\ndef main_process():\r\n    global A_Point, B_Point, status, time, text\r\n    display.show(\"T\", display.hex2byte('#FF00FF'))\r\n\r\n    if now.isReadyToRead():\r\n        text = now.readAsText()\r\n        print(text)\r\n        if text[0].isdigit() and text[1].isdigit():\r\n            point = text[0:2]\r\n            text = text[2:]\r\n        elif text[0].isdigit():\r\n            point = text[0]\r\n            text = text[1:]\r\n        if text[0] == \"A\":\r\n            A_Point = point\r\n            print(A_Point)\r\n        elif text[0] == \"B\":\r\n            B_Point = point\r\n            print(B_Point)\r\n        \r\n        for i in text:\r\n            if not i.isdigit() and i != \":\":\r\n                status += i\r\n        text = \"\".join([x for x in text if x not in status])\r\n        text = str(text)\r\n        time = text\r\n        print(f\"text = {text}\")\r\n\r\n    show_point(A_Point, B_Point, status, time)\r\n    sleep(0.5)\r\n    status = \"\"\r\n    time = \"\"\r\n\r\n    \r\n\r\nwhile True:\r\n    main_process()\r\n","config.json":"{\"mode\":\"code\",\"github\":null,\"board\":\"kidbright32-v1.3\",\"level\":\"Beginner\"}"}